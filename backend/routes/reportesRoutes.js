import express from 'express';
import {
  getReporteVentas,
  getProductosMasVendidos,
  getEstadoInventario,
  getAnalisisClientes,
  getEstadoPedidos,
  getRendimientoCategorias,
  getDashboardGeneral
} from '../controllers/reportesController.js';

const router = express.Router();

// Middleware de logging
router.use((req, res, next) => {
  console.log(`REPORTES: ${req.method} ${req.path} - Query:`, req.query);
  next();
});

console.log('üìä Iniciando definici√≥n de rutas de reportes...');

// Ruta de salud para reportes
router.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    service: 'Reportes API',
    timestamp: new Date().toISOString(),
    endpoints: [
      '/dashboard',
      '/ventas',
      '/productos-vendidos',
      '/inventario',
      '/clientes',
      '/pedidos',
      '/categorias'
    ]
  });
});

// ========== DASHBOARD GENERAL ==========
router.get('/dashboard', async (req, res) => {
  try {
    console.log('üìä Ejecutando ruta: /dashboard');
    await getDashboardGeneral(req, res);
  } catch (error) {
    console.error('‚ùå Error en /dashboard:', error);
    res.status(500).json({
      error: 'Error al generar dashboard',
      message: error.message
    });
  }
});

// ========== REPORTE DE VENTAS ==========
router.get('/ventas', async (req, res) => {
  try {
    console.log('üí∞ Ejecutando reporte de ventas');
    console.log('Par√°metros:', req.query);
    await getReporteVentas(req, res);
  } catch (error) {
    console.error('‚ùå Error en reporte de ventas:', error);
    res.status(500).json({
      error: 'Error al generar reporte de ventas',
      message: error.message
    });
  }
});

// ========== PRODUCTOS M√ÅS VENDIDOS ==========
router.get('/productos-vendidos', async (req, res) => {
  try {
    console.log('üìà Ejecutando reporte de productos m√°s vendidos');
    console.log('Par√°metros:', req.query);
    await getProductosMasVendidos(req, res);
  } catch (error) {
    console.error('‚ùå Error en reporte de productos vendidos:', error);
    res.status(500).json({
      error: 'Error al generar reporte de productos vendidos',
      message: error.message
    });
  }
});

// ========== ESTADO DE INVENTARIO ==========
router.get('/inventario', async (req, res) => {
  try {
    console.log('üì¶ Ejecutando reporte de inventario');
    console.log('Par√°metros:', req.query);
    await getEstadoInventario(req, res);
  } catch (error) {
    console.error('‚ùå Error en reporte de inventario:', error);
    res.status(500).json({
      error: 'Error al generar reporte de inventario',
      message: error.message
    });
  }
});

// ========== AN√ÅLISIS DE CLIENTES ==========
router.get('/clientes', async (req, res) => {
  try {
    console.log('üë• Ejecutando an√°lisis de clientes');
    console.log('Par√°metros:', req.query);
    await getAnalisisClientes(req, res);
  } catch (error) {
    console.error('‚ùå Error en an√°lisis de clientes:', error);
    res.status(500).json({
      error: 'Error al generar an√°lisis de clientes',
      message: error.message
    });
  }
});

// ========== ESTADO DE PEDIDOS ==========
router.get('/pedidos', async (req, res) => {
  try {
    console.log('üìã Ejecutando reporte de estado de pedidos');
    console.log('Par√°metros:', req.query);
    await getEstadoPedidos(req, res);
  } catch (error) {
    console.error('‚ùå Error en reporte de pedidos:', error);
    res.status(500).json({
      error: 'Error al generar reporte de pedidos',
      message: error.message
    });
  }
});

// ========== RENDIMIENTO POR CATEGOR√çAS ==========
router.get('/categorias', async (req, res) => {
  try {
    console.log('üìä Ejecutando reporte de rendimiento por categor√≠as');
    console.log('Par√°metros:', req.query);
    await getRendimientoCategorias(req, res);
  } catch (error) {
    console.error('‚ùå Error en reporte de categor√≠as:', error);
    res.status(500).json({
      error: 'Error al generar reporte de categor√≠as',
      message: error.message
    });
  }
});

// ========== RUTAS CON PAR√ÅMETROS ESPEC√çFICOS ==========

// Reporte de ventas por m√©todo de pago espec√≠fico
router.get('/ventas/metodo-pago/:metodo', async (req, res) => {
  try {
    const { metodo } = req.params;
    console.log(`üí≥ Ejecutando reporte de ventas para m√©todo: ${metodo}`);
    
    // Agregar filtro de m√©todo de pago a la query
    req.query.metodoPago = metodo;
    await getReporteVentas(req, res);
  } catch (error) {
    console.error('‚ùå Error en reporte de ventas por m√©todo:', error);
    res.status(500).json({
      error: 'Error al generar reporte de ventas por m√©todo de pago',
      message: error.message
    });
  }
});

// Inventario por categor√≠a espec√≠fica
router.get('/inventario/categoria/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üì¶ Ejecutando reporte de inventario para categor√≠a: ${id}`);
    
    // Agregar filtro de categor√≠a a la query
    req.query.categoriaId = id;
    await getEstadoInventario(req, res);
  } catch (error) {
    console.error('‚ùå Error en reporte de inventario por categor√≠a:', error);
    res.status(500).json({
      error: 'Error al generar reporte de inventario por categor√≠a',
      message: error.message
    });
  }
});

// Clientes por regi√≥n espec√≠fica
router.get('/clientes/region/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üë• Ejecutando an√°lisis de clientes para regi√≥n: ${id}`);
    
    // Agregar filtro de regi√≥n a la query
    req.query.regionId = id;
    await getAnalisisClientes(req, res);
  } catch (error) {
    console.error('‚ùå Error en an√°lisis de clientes por regi√≥n:', error);
    res.status(500).json({
      error: 'Error al generar an√°lisis de clientes por regi√≥n',
      message: error.message
    });
  }
});

// ========== EXPORTACIONES (FUTURAS) ==========

// Ruta para exportar reportes (preparado para futuras implementaciones)
router.get('/export/:tipo', (req, res) => {
  const { tipo } = req.params;
  const { formato = 'json' } = req.query;
  
  res.json({
    message: `Exportaci√≥n de ${tipo} en formato ${formato} - Funcionalidad en desarrollo`,
    tipo,
    formato,
    disponible: false
  });
});

// Middleware de manejo de errores espec√≠fico para reportes
router.use((error, req, res, next) => {
  console.error('‚ùå Error en rutas de reportes:', error);
  
  if (error.code === 'ER_NO_SUCH_TABLE') {
    return res.status(500).json({
      error: 'Error de base de datos - Tabla no encontrada',
      message: 'Verifique que todas las tablas est√©n creadas correctamente'
    });
  }
  
  if (error.code === 'ER_BAD_FIELD_ERROR') {
    return res.status(500).json({
      error: 'Error de base de datos - Campo no encontrado',
      message: 'Verifique la estructura de la base de datos'
    });
  }
  
  res.status(500).json({
    error: 'Error interno en el m√≥dulo de reportes',
    message: error.message,
    timestamp: new Date().toISOString()
  });
});

console.log('üìä Todas las rutas de reportes definidas correctamente');

export default router;